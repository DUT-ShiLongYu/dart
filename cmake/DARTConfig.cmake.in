# This file is automatically generated from CMake for @PROJECT_NAME@
# Include this file in CMakeLists.txt with 
# INCLUDE(@CMAKE_INSTALL_PREFIX@/share/dart/@DART_CONFIG_FILE@) 

###############################################################################
# Find DART
#
# This sets the following variables:
# DART_FOUND - True if DART was found.
# DART_INCLUDEDIR - Directories containing the DART include files.
# DART_LIBRARIES - Libraries needed to use DART.
# DART_DEFINITIONS - Compiler flags for DART.

if (WIN32 AND NOT CYGWIN)
  set(INCL_DIRS "C:/Golems/include")
elseif(UNIX)
  set(INCL_DIRS "@CMAKE_INSTALL_PREFIX@/include")
endif()

find_package(PkgConfig QUIET)
if(PKG_CONFIG_FOUND)
   pkg_check_modules(PC_DART dart)
   set(DART_DEFINITIONS ${PC_DART_CFLAGS_OTHER})
endif()

SET(CMAKE_MODULE_PATH "@CMAKE_MODULE_PATH@")

find_path(DART_INCLDIR kinematics/Skeleton.h planning/World.h
    HINTS ${PC_DART_INCLUDEDIR} /usr/local/include
    PATH_SUFFIXES dart)    
   
# Eigen
find_path(EIGEN3_INCLUDEDIR NAMES signature_of_eigen3_matrix_library
    PATHS ${INCL_DIRS} PATH_SUFFIXES eigen3 eigen)

# OpenGL
find_package(OpenGL REQUIRED)

# GLUT
find_package(GLUT REQUIRED)
if(WIN32 AND NOT CYGWIN)
    message(STATUS "Defaulting to provided GLUT libraries. Change GLUT_PREFIX_PATH to use a different version of GLUT")
    set(GLUT_PREFIX_PATH "C:/Golems/" CACHE PATH "Root directory of GLUT installation")
	include_directories( "C:/Golems/include" )
	include_directories( "C:/Golems/lib" )
endif()

include_directories(${GLUT_INCLUDE_DIR})

# Boost and Assimp Boost Workaround
find_package(Boost 1.42.0 REQUIRED)
include_directories(${Boost_INCLUDE_DIRS} )
link_directories(${Boost_LIBRARY_DIRS} )

if(MSVC OR MSVC90 OR MSVC10)
    add_definitions(-DBOOST_ALL_NO_LIB)
endif()
add_definitions(-DBOOST_TEST_DYN_LINK)
set(Boost_USE_MULTITHREADED      ON)
set(Boost_USE_STATIC_RUNTIME    OFF)

# FLANN
if(PKG_CONFIG_FOUND)
   pkg_check_modules(PC_FLANN flann)
   find_path(FLANN_INCLUDEDIR flann/flann.h 
   PATHS ${INCL_DIRS} ${PC_FLANN_INCLUDEDIR} PATH_SUFFIXES flann)
   set(FLANN_LIBRARIES ${PC_FLANN_LIBRARIES})
endif()

# CCD
if(PKG_CONFIG_FOUND)
   pkg_check_modules(PC_CCD ccd)
   find_path(CCD_INCLUDEDIR ccd/ccd.h
   PATHS ${INCL_DIRS} ${PC_CCD_INCLUDEDIR} PATH_SUFFIXES ccd)
   set(CCD_LIBRARIES ${PC_CCD_LIBRARIES})
endif()

# FCL
if(PKG_CONFIG_FOUND)
   pkg_check_modules(PC_FCL fcl)
   find_path(FCL_INCLUDEDIR fcl/collision.h 
   PATHS ${INCL_DIRS} ${PC_FCL_INCLUDEDIR} PATH_SUFFIXES fcl)
   set(FCL_LIBRARIES ${PC_FCL_LIBRARIES})
endif()


set(DART_LIBS parser urdfdom_model urdfdom_model_state urdfdom_sensor planning robotics  collision dynamics kinematics renderer utils tinyxml integration lcpsolver fcl ${GLUT_LIBRARY} ${OPENGL_LIBRARY})
foreach(DART_LIB ${DART_LIBS})
    set(DART_LIBRARIES ${DART_LIBRARIES} optimized ${DART_LIB} debug ${DART_LIB}d)
endforeach(DART_LIB)

set(DART_LIBS_NO_DEBUG assimp ccd)
foreach(DART_LIB ${DART_LIBS_NO_DEBUG})
    set(DART_LIBRARIES ${DART_LIBRARIES} ${DART_LIB})
endforeach(DART_LIB)

set(DART_INCLUDEDIR ${DART_INCLDIR} ${EIGEN3_INCLUDEDIR} ${CCD_INCLUDEDIR} ${FCL_INCLUDEDIR} ${Boost_INCLUDE_DIRS} ${GLUT_INCLUDE_DIRS})

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(DART DEFAULT_MSG DART_INCLUDEDIR DART_LIBRARIES)

mark_as_advanced(DART_INCLUDEDIR DART_LIBRARIES)

