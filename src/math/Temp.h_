/*
 * Copyright (c) 2011, Georgia Tech Research Corporation
 * All rights reserved.
 *
 * Author(s): Jeongseok Lee <jslee02@gmail.com>
 * Date: 05/05/2013
 *
 * Geoorgia Tech Graphics Lab and Humanoid Robotics Lab
 *
 * Directed by Prof. C. Karen Liu and Prof. Mike Stilman
 * <karenliu@cc.gatech.edu> <mstilman@cc.gatech.edu>
 *
 * This file is provided under the following "BSD-style" License:
 *   Redistribution and use in source and binary forms, with or
 *   without modification, are permitted provided that the following
 *   conditions are met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 *   CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 *   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 *   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 *   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 *   AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef DYNAMICS_INERTIA_H
#define DYNAMICS_INERTIA_H

#include <Eigen/Dense>

namespace dynamics
{

/// @brief
class Inertia
{
public:
    EIGEN_MAKE_ALIGNED_OPERATOR_NEW

    /// @brief
    Inertia();

    /// @brief
    virtual ~Inertia();

    /// @brief
    void setMass(double _mass) { mMass = _mass; }

    /// @brief
    double getMass(void) const { return mMass; }

    /// @brief
    void setMomentsOfInertia(const Eigen::Matrix3d& _moi);

    /// @brief
    Eigen::Matrix3d getMomentsOfInertia() const;

    /// @brief
    void setCenterOfMass(const Eigen::Vector3d& _com);

    /// @brief
    const Eigen::Vector3d& getCenterOfMass(void) { return mCenterOfMass; }

protected:
    /// @brief Mass the object. Default is 1.0.
    double mMass;

    /// @brief Principal moments of inertia. Default is (1.0 1.0 1.0)
    /// These Moments of Inertia are specified in the local Inertial frame.
    Eigen::Vector3d mPrincipals;

    /// @brief Product moments of inertia. Default is (0.0 0.0 0.0)
    /// These MOI off-diagonals are specified in the local Inertial frame.
    /// Where products.x is Ixy, products.y is Ixz and products.z is Iyz.
    Eigen::Vector3d mProducts;

    /// \brief Center of gravity in the Link frame.
    ///        Default is (0.0 0.0 0.0  0.0 0.0 0.0)
    Eigen::Vector3d mCenterOfMass;
private:
};

} // namespace dynamics

#endif // DYNAMICS_INERTIA_H
