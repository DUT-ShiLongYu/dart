# This file is automatically generated from CMake from @DART_CONFIG_FILE@.in
# Include this file in CMakeLists.txt with 
# INCLUDE(${CMAKE_INSTALL_PREFIX}/share/dart/@DART_CONFIG_FILE@) 

###############################################################################
# Find DART
#
# This sets the following variables:
# DART_FOUND - True if DART was found.
# DART_INCLUDE_DIRS - Directories containing the DART include files.
# DART_LIBRARIES - Libraries needed to use DART.
# DART_DEFINITIONS - Compiler flags for DART.

find_package(PkgConfig)
pkg_check_modules(PC_DART dart)
set(DART_DEFINITIONS ${PC_DART_CFLAGS_OTHER})

SET( DART_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}/../.." )

find_path(DART_INCLUDE_DIR kinematics/Skeleton.h planning/World.h
    HINTS ${PC_DART_INCLUDEDIR} ${PC_DART_INCLUDE_DIRS}
    PATHS ${DART_ROOT_DIR} ${DART_ROOT_DIR}/include ${DART_ROOT_DIR}/include/dart)    

find_path(DART_EIGEN_INCLUDE_DIR Eigen/Core
    HINTS ${PC_DART_INCLUDEDIR} ${PC_DART_INCLUDE_DIRS}
    PATHS ${DART_ROOT_DIR} ${DART_ROOT_DIR}/include/eigen-3.0.5/)    
    
find_path(CCD_INCLUDE_DIR ccd/ccd.h
    HINTS ${PC_DART_INCLUDEDIR} ${PC_DART_INCLUDE_DIRS}
    PATHS ${DART_ROOT_DIR} ${DART_ROOT_DIR}/include)
    
find_path(FCL_INCLUDE_DIR fcl/collision.h
    HINTS ${PC_DART_INCLUDEDIR} ${PC_DART_INCLUDE_DIRS}
    PATHS ${DART_ROOT_DIR} ${DART_ROOT_DIR}/include)

set(Boost_USE_MULTITHREADED      ON)
set(Boost_USE_STATIC_RUNTIME    OFF)
FIND_PACKAGE(Boost 1.42.0 REQUIRED system thread date_time chrono)
add_definitions( -DBOOST_ALL_DYN_LINK )

SET( DART_LIBS parser urdfdom_model urdfdom_model_state urdfdom_sensor  robotics  collision dynamics kinematics renderer utils tinyxml )
FOREACH( DART_LIB ${DART_LIBS} )
    find_library(DART_${DART_LIB}_LIBRARY ${DART_LIB} ${DART_LIB}d
        HINTS ${PC_DART_LIBDIR} ${PC_DART_LIBRARY_DIRS}
        PATHS ${DART_ROOT_DIR} ${DART_ROOT_DIR}/lib )
    SET(DART_LIBRARY ${DART_LIBRARY} ${DART_${DART_LIB}_LIBRARY})
    SET(DART_VAR_NAMES ${DART_VAR_NAMES} DART_${DART_LIB}_LIBRARY)
ENDFOREACH(DART_LIB)

SET(DART_LIBRARIES ${DART_LIBRARY})

SET( DART_DEP_LIBS ccd fcl assimp )
FOREACH( DART_LIB ${DART_DEP_LIBS} )
    find_library(DART_${DART_LIB}_LIBRARY ${DART_LIB} ${DART_LIB}d
        HINTS ${PC_DART_LIBDIR} ${PC_DART_LIBRARY_DIRS}
        PATHS ${DART_ROOT_DIR} ${DART_ROOT_DIR}/lib )
    SET(DART_LIBRARIES ${DART_LIBRARIES} ${DART_${DART_LIB}_LIBRARY})
    SET(DART_VAR_NAMES ${DART_VAR_NAMES} DART_${DART_LIB}_LIBRARY)
ENDFOREACH(DART_LIB)

SET(DART_LIBRARIES ${DART_LIBRARIES} ${Boost_LIBRARIES})

set(DART_INCLUDE_DIRS ${DART_INCLUDE_DIR} ${DART_EIGEN_INCLUDE_DIR} ${CCD_INCLUDE_DIR} ${FCL_INCLUDE_DIR} ${Boost_INCLUDE_DIRS})

#set(DART_LIBRARIES ${DART_LIBRARY} tinyxml2 tinyxml assimp optimized collision optimized dynamics optimized geometry optimized kinematics optimized planning optimized renderer optimized utils debug collisiond debug dynamicsd debug geometryd debug kinematicsd debug planningd debug rendererd debug utilsd)

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(DART DEFAULT_MSG
    DART_LIBRARY DART_INCLUDE_DIR DART_EIGEN_INCLUDE_DIR CCD_INCLUDE_DIR FCL_INCLUDE_DIR ${DART_VAR_NAMES})

mark_as_advanced(DART_LIBRARY DART_INCLUDE_DIR)


